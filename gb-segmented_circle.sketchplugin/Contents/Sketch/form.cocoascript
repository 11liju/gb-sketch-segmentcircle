var form = new Fo();

function Fo() {
    this.defaults = {
        rectX: 0,
        rectY: 0,
        rectW: 300,
        rectH: 24,
        itemMarginX: 4,
        itemMarginY: 4,
        inputHeight: 24,
        labelHeight: 24,
        fontSize: 11,
        fontColor: '#000000',
        groupLabelFontSize: 13,
        groupLabelFontColor: '#969696',
        emptyTitle: 'Title',
        emptyMessage: 'Message',
        emptyLabel: 'Label',
        emptyArrayValues: ['First Item', 'Second Item', 'Third Item'],
        autoIdSplitter: ':'
    }
}

// Alert window base setup
Fo.mkWd = function (useCancelBtn, sMsg, sInfo) {
    var wd = [COSAlertWindow new]
    wd.setMessageText(title || this.defaults.emptyTitle)
    wd.setInformativeText(sInfo || this.defaults.emptyMessage)
    if (iconName) {
        var icon = NSImage.alloc().initByReferencingFile(utils.scriptResourcesPath + '/' + iconName);
        alert.setIcon(icon);
    }
    wd.addButtonWithTitle('OK')
    if (useCancelBtn) wd.addButtonWithTitle('Cancel')
    //var responseCode = alert.runModal();
    //return responseCode;
    return wd
};

Fo.mkText = function(text, fontColor, aRct, canEdit, sSuggest){
    var text = text || this.defaults.emptyLabel
    var editable = canEdit || false
    var fontSize = this.defaults.fontSize
    var fontColor = hexToRgb(fontColor)
    var bold = bold || false
    var aRct = aRct || [this.defaults.rectX, this.defaults.rectY, this.defaults.rectW, this.defaults.inputHeight]
    var frame = NSMakeRect(aRct[0], aRct[1], aRct[2], aRct[3])
    var txt = NSTextField.alloc().initWithFrame(frame)
    txt.setStringValue(text)
    txt.textColor = NSColor.colorWithDeviceRed_green_blue_alpha_(fontColor[0], fontColor[1], fontColor[2], 1.0)
    label.setFont((bold) ? NSFont.boldSystemFontOfSize(fontSize) : NSFont.systemFontOfSize(fontSize))
    txt.setEditable(editable)
    txt.setSelectable(editable)
    txt.setDrawsBackground(editable)
    txt.setBezeled(editable)
    if(editable){ txt.setPlaceholderString_(sSuggest || "Enter here")}
    return txt
}

Fo.mkChkBox = function (text, checked, aRct) {
    var checked = (checked == false) ? NSOffState : NSOnState
    var aRct = aRct || [this.defaults.rectX, this.defaults.rectY, this.defaults.rectW, this.defaults.inputHeight]
    var frame = NSMakeRect(aRct[0], aRct[1], aRct[2], aRct[3])
    var checkbox = NSButton.alloc().initWithFrame(frame)
    checkbox.setTitle(text)
    checkbox.setState(checked)
    checkbox.setButtonType(NSSwitchButton)
    checkbox.setBezelStyle(0)
    return checkbox
};

Fo.mkRadio = function(){

}

Fo.mkDrpdown = function(aVals, aRct){
  var aVals = aVals || this.defaults.emptyArrayValues
  var aRct = aRct || [this.defaults.rectX, this.defaults.rectY, this.defaults.rectW, this.defaults.inputHeight]
  var frame = NSMakeRect(aRct[0], aRct[1], aRct[2], aRct[3])
  var drpDown = NSComboBox.alloc().initWithFrame(frame)
  drpDown.addItemsWithObjectValues(aVals)
  return drpDown
}

// Fo.createImageSegmentedControl = function(context,numSegments,frame,imagePaths,selectedSegment){
//     var control = NSSegmentedControl.alloc().initWithFrame_(frame);
//     control.setSegmentCount_(numSegments);
//
//     var segWidth = frame.size.width / numSegments - (numSegments - 1); //pixel divider
//     var plugin   = context.plugin;
//
//     var images = new Array(numSegments);
//     for(var i = 0, image; i < numSegments; ++i){
//         image = images[i] = NSImage.alloc().initByReferencingFile_(
//             plugin.urlForResourceNamed_(imagePaths[i]).path()
//         );
//         image.setTemplate_(true);
//         control.setImage_forSegment_(image,i);
//         control.setWidth_forSegment_(segWidth,i);
//     }
//
//     if(selectedSegment !== undefined){
//         control.setSelectedSegment_(selectedSegment);
//     }
//
//     return control;
// };


function hexToRGB01(hex, returnStringVal) {
    var hex = hex.replace('#', '')
    var returnStringVal = returnStringVal || false
    var bigint = parseInt(hex, 16)
    var r = +(1 / 255 * ((bigint >> 16) & 255)).toFixed(2)
    var g = +(1 / 255 * ((bigint >> 8) & 255)).toFixed(2)
    var b = +(1 / 255 * (bigint & 255)).toFixed(2)
    return returnStringVal ? [r, g, b].join() : [r, g, b]
}


// main()
// if ( layers.count() > 0 ) {
//
// 	var userInput = COSAlertWindow.new();
//
// 	userInput.setMessageText("Rename Text Layers");
//
// 	userInput.addTextLabelWithValue("Find What:");
// 	userInput.addTextFieldWithValue("");
//
// 	userInput.addAccessoryView( regexpRename.createCheckbox( 'regex', 'regex', false ) );
// 	userInput.addAccessoryView( regexpRename.createCheckbox( 'global match', 'g', true ) );
// 	userInput.addAccessoryView( regexpRename.createCheckbox( 'ignore case', 'i', true ) );
//
// 	userInput.addTextLabelWithValue("Replace With:");
// 	userInput.addTextFieldWithValue("");
//
// 	userInput.addButtonWithTitle('Replace');
// 	userInput.addButtonWithTitle('Cancel');
//
// 	var responseCode = userInput.runModal();
//
// 	if ( 1000 == responseCode ) {
// 		log('run 1')
//
// 		var flag = '';
// 		if ( userInput.viewAtIndex(3).state() ) flag += 'g';
// 		if ( userInput.viewAtIndex(4).state() ) flag += 'i';
//
// 		var find       = userInput.viewAtIndex(2).state() ? new RegExp( userInput.viewAtIndex(1).stringValue(), flag ) : userInput.viewAtIndex(1).stringValue();
// 		var replace    = userInput.viewAtIndex(6).stringValue();
// 		var matchTimes = 0;
//
// 		log(userInput.viewAtIndex(2).state())
//
// 		for ( var i = 0; i < selection.count(); i++ ) {
// 			var layer = selection[i];
// 			var string = layer.stringValue();
// 			if ( string.match( find ) ){
// 				matchTimes++;
// 				layer.setStringValue(string.replace(find, replace));
// 			}
// 		};
//
// 		doc.showMessage( 'Replaced text in ' + matchTimes + ' layers' );
//
// 	}
//
// }
