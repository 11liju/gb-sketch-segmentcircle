var doc, pi, r, segs, idealsegs, vals, thickness, pArray, def, sv

var onRun = function(context) {
  // Global variables
  doc = context.document
  pi = Math.PI
  r = 100
  segs = idealsegs = 6
  vals = "40,30,20,10,5"
  thickness = 20
  pArray = []
  def = [NSUserDefaults standardUserDefaults]
  sv = getSkVer()
  //actual functions
  start()
}

var start = function(){
    var whichOne = "var"//switch case which type of segmented circles
    switch (whichOne) {

      case "var":
        var key = "gb_segCircle_var" //retrieve value from defaults, if none set
        var sc = JSON.parse([def objectForKey:key]) || {el:[{label: "Outer radius", data:r}, {label: "Values", data:vals}, {label: "Thickness", data:thickness}]}
        var inp = showDlg(
          "Variable Segments Circle",
          "Input radius, values and thickness. \n\nValues are a comma seperated list of numbers.",
          sc.el,
          "Create Circle")
        sc.el[0].data = parseInt(inp[0])
        sc.el[1].data = inp[1].split(",").join(",") //not sure why it only works this way
        sc.el[2].data = parseInt(inp[2])
        [def setObject:JSON.stringify(sc) forKey:key]
        varSegmentCircle(sc.el[0].data, sc.el[1].data.split(","), sc.el[2].data)
      break;

      case "ticks":
      //Statements executed when the result of expression matches value1
      break;

      case "dashes":
      //Statements executed when the result of expression matches value1
      break;

      default:
        var key = "gb_segCircle_segm" //retrieve value from defaults, if none set
        var sc = [def objectForKey:key] || [{label: "Outer radius", data:r}, {label: "Number of segments", data:segs}, {label: "Thickness", data:thickness}]
        var inp = showDlg(
          "Segment Circle",
          "Input radius, number of segments and thickness. \n\nThickness < 2 â†’ circle is rendered as line segments.",
          [{label: "Outer radius", data:sc[0].data}, {label: "Number of segments", data:sc[1].data}, {label: "Thickness", data:sc[2].data}],
          "Create Circle")
        // initialValue:sc]
        r =         parseInt(inp[0])
        segs =      Math.max(Math.round(parseInt(inp[1])),3)
        thickness = Math.min(parseInt(inp[2]) || 1,r)
        [def setObject:[{label: "Outer radius", data:r}, {label: "Number of segments", data:segs}, {label: "Thickness", data:thickness}] forKey:key]
        segmentCircle(r, segs, thickness)
    }

    //varSegmentCircle([50,30,20])
    //varSegmentCircle(100, [40,30,20,10,5], 24)//debug
    //dashedCircle(100, 80, 40, 1)//debug
    //ticksCircle(84, 100, 4, 8, 4, 4, 4, 20, pi/2)//debug
}

var segmentCircle = function(rCirc, numSegs, nThick){
  var gr = doc.currentPage().addLayerOfType("group")
  var c = getRnCol()
  gr.setName("Segments circle")

  var angSeg = 2 * pi / numSegs

  for(var i = 0; i < numSegs; i++){
    var shape = makeArcSeg(angSeg * i , angSeg * (i + 1), rCirc, nThick)
    if (nThick > 1) {styleShapeArea(shape, c)} else {styleShape(shape, c)}
    shape.setName("Segment " + (i + 1))
    gr.addLayers([shape]);
  }
  placeLayer(gr)
}

var varSegmentCircle = function(rCirc, aSegments, nThick){
  var numSegs = aSegments.length
  var aSegs = preProcSeg(aSegments)

  var gr = doc.currentPage().addLayerOfType("group")
  gr.setName("Variable segments circle")
  for(var i = 0; i < numSegs; i++){
    var shape = makeArcSeg(aSegs[i], aSegs[i + 1], rCirc, nThick)
    if (nThick > 1) {styleShapeArea(shape,getRnCol())} else {styleShape(shape,getRnCol())}
    shape.setName("Segment " + (aSegments[i]))
    gr.addLayers([shape]);
  }
  placeLayer(gr)
}

var ticksCircle = function(rOutMin, rOutMaj, numMin, numMaj, nStrkMin, nStrkMaj, nThickMin, nThickMaj, angOmit) {
  //creates minor and major tickmarks along a circle minus the cutout angOmit
  var gr = doc.currentPage().addLayerOfType("group")
  var c1 = getRnCol()
  var c2 = getRnCol()
  gr.setName("Tickmarks circle")
  var grMaj = gr.addLayerOfType("group")
  grMaj.setName("Major tickmarks")
  if (numMin > 0){
    var grMin = gr.addLayerOfType("group")
    grMin.setName("Minor tickmarks")
  }

  var angRange = 2 * pi - angOmit
  //alert(angRange,"Range:")
  var cf = angRange * rOutMaj
  var angPx = angRange / Math.round(cf)
  var angDistTick = angRange / ((numMaj - 1) * (numMin + 1))
  var angCor = (angOmit > 0) ? angOmit / 2 + pi / 2 : 0
  for(var i = 0; i < numMaj; i++){
    var a = (i * (numMin + 1)) * angDistTick - angCor
    var shape = makeArcSeg(a - ((nStrkMaj/2) * angPx) , a + ((nStrkMaj/2) * angPx), rOutMaj, nThickMaj)
    if (nThickMaj > 1) {styleShapeArea(shape,c1)} else {styleShape(shape,c1)}
    shape.setName("Tick major " + (i * (numMin + 1)))
    grMaj.addLayers([shape]);

    if(numMin >= 1 && (i < (numMaj - 1))){
      var ub = (i == (numMaj - 2)) ? numMin + 2 : numMin + 1 // last minor tick under the last major one
      for(var j = 0; j < ub; j++){
        var a = ((i * (numMin + 1)) + j) * angDistTick - angCor
        var shape = makeArcSeg(a - ((nStrkMin/2) * angPx) , a + ((nStrkMin/2) * angPx), rOutMin, nThickMin)
        if (nThickMin > 1) {styleShapeArea(shape,c2)} else {styleShape(shape,c2)}
        shape.setName("Tick minor " + (((i * (numMin + 1)) + j) + 0))
        grMin.addLayers([shape]);
      }
    }
  }
  placeLayer(gr)
}

var dashedCircle = function(rCirc, lDash, lGap, nThick) {
  //creates dashing along the circle circumference
  //optmize dash/gap size for even dashes
  var cf = 2 * pi * rCirc
  var lSeg = lGap + lDash
  var numSegs = Math.max(4, Math.floor(cf / lSeg))
  var angSeg = 2 * pi / numSegs
  var angDash = angSeg * lDash / lSeg
  var angGap = angSeg - angDash

  var gr = doc.currentPage().addLayerOfType("group")
  gr.setName("Dashed circle")
  var c = getRnCol()
  for(var i = 0; i < numSegs; i++){
    var shape = makeArcSeg(angSeg * i, (angSeg * i) + angDash, rCirc, nThick)
    if (nThick > 1) {styleShapeArea(shape, c)} else {styleShape(shape, c)}
    shape.setName("Dash " + i)
    gr.addLayers([shape])

  }
  placeLayer(gr)
}


//*********** util functions ***********//

var computeBezierArc = function(angStart, angEnd, rSeg){
  //compute single segment with start and end angle and radius
  var lSeg = angEnd - angStart
  var lCpHandle = rSeg * 4 / 3 * (Math.tan(lSeg / 4))
  //alert("length of cp handle is " + lCpHandle, "Test")
  var aGeomFactor = [Math.cos(angStart - pi/2), Math.sin(angStart - pi/2)]
  var pAnchor1 = 		[rd2dec(aGeomFactor[0] * rSeg), rd2dec(aGeomFactor[1] * rSeg)]
  var pLe1 =        [pAnchor1[0] - rd2dec(aGeomFactor[1] * lCpHandle), pAnchor1[1] + rd2dec(aGeomFactor[0] * lCpHandle)]
  var pRi1 =        [pAnchor1[0] + rd2dec(aGeomFactor[1] * lCpHandle), pAnchor1[1] - rd2dec(aGeomFactor[0] * lCpHandle)]
  //alert("GFact1 is " + aGeomFactor, "Test")
  aGeomFactor =     [Math.cos(angEnd - pi/2), Math.sin(angEnd - pi/2)]
  var pAnchor2 =    [rd2dec(aGeomFactor[0] * rSeg), rd2dec(aGeomFactor[1] * rSeg)]
  var pLe2 =        [pAnchor2[0] - rd2dec(aGeomFactor[1] * lCpHandle), pAnchor2[1] + rd2dec(aGeomFactor[0] * lCpHandle)]
  var pRi2 =        [pAnchor2[0] + rd2dec(aGeomFactor[1] * lCpHandle), pAnchor2[1] - rd2dec(aGeomFactor[0] * lCpHandle)]

  return {aBeg:pAnchor1, cPt1:pLe1, cPt2:pRi2, aEnd:pAnchor2}
}

var computeLargeBezierArc = function(angStart, angEnd, rSeg){
  //return path points for n arcs > ideal segments
  var angIdeal = 2 * pi / idealsegs
  var nIdeal = Math.trunc((angEnd - angStart) / angIdeal)
  //var aRem = (angEnd - angStart) % angIdeal
  if(nIdeal < 0){angIdeal *= (-1);nIdeal *= (-1);}//CCW
  var aPts = []
  var angCurr = angStart
  for(i = 0; i < nIdeal + 1; i++){
    if(i < nIdeal) {
      aPts.push(computeBezierArc(angCurr, angCurr + angIdeal, rSeg))//fill with ideal sized segments
      angCurr += angIdeal
    } else {
      if(Math.abs(angEnd - angCurr) > 0.00001){ aPts.push(computeBezierArc(angCurr, angEnd, rSeg))} //end with smaller sized remainder
    }
  }
  return aPts;
}

var makeArcSeg = function(angStart, angEnd, rSeg, nThick){
  var path = NSBezierPath.bezierPath()
  var aPts = computeLargeBezierArc(angStart, angEnd, rSeg)
  var nP = aPts.length
  for(var j = 0; j < nP; j++){
    if(j == 0) {[path moveToPoint:NSMakePoint(aPts[0].aBeg[0], aPts[0].aBeg[1])]}
    [path curveToPoint:NSMakePoint(aPts[j].aEnd[0], aPts[j].aEnd[1]) controlPoint1:NSMakePoint(aPts[j].cPt1[0], aPts[j].cPt1[1]) controlPoint2:NSMakePoint(aPts[j].cPt2[0], aPts[j].cPt2[1])]
  }
  if (nThick > 1) {
    var rIn = rSeg - nThick
    var aPt2 = computeLargeBezierArc(angEnd, angStart, rIn)
    n2 = aPt2.length
    for(var k = 0; k < n2; k++){
      if(k == 0) {[path lineToPoint:NSMakePoint(aPt2[0].aBeg[0], aPt2[0].aBeg[1])]}
      [path curveToPoint:NSMakePoint(aPt2[k].aEnd[0], aPt2[k].aEnd[1]) controlPoint1:NSMakePoint(aPt2[k].cPt1[0], aPt2[k].cPt1[1]) controlPoint2:NSMakePoint(aPt2[k].cPt2[0], aPt2[k].cPt2[1])]
    }
    [path closePath]
  }
  return MSShapeGroup.shapeWithBezierPath(path);
}

var rd2dec = function(num) {
    return Math.round(num * 100) / 100;
}

var preProcSeg = function(aSegments){
  //normalize list arbitrary string numbers as distr. of a total of 2 * pi
  var aSegs = [0]
  var total = 0;
  var n = aSegments.length;
  var i = n;
  while (i--) {total += parseInt(aSegments[i])}
  var factor = 2 * pi / total
  for (i=1; i<=n; i++) {aSegs.push(aSegs[i-1] + (parseInt(aSegments[i-1]) * factor))}
  aSegs[aSegs.length - 1] = 2 * pi
  alert(dbgArray(aSegs),"segments done processing")
  return aSegs
}

var alert = function(sText, sTitle) {
	[[NSApplication sharedApplication] displayDialog:sText withTitle:sTitle];
    //doc.showMessage(sText)
}

var getViewF = function(){
    //get position with view.postion.x etc and size with view.size.width etc.
    view = [doc currentView];
    return [view frame];
}

var styleShape = function(shapeGr, sC){
    var border = shapeGr.style().borders().addNewStylePart();
    border.color = MSColor.colorWithSVGString(sC);
    border.thickness = 2;
}

var styleShapeArea = function(shapeGr, sC){
    var fill = shapeGr.style().fills().addNewStylePart();
    fill.color = MSColor.colorWithSVGString(sC);
    var border = shapeGr.style().borders().addNewStylePart();
    border.color = MSColor.colorWithSVGString("#ffffff");
    border.thickness = .5;
    border.position = 1;
}

var placeLayer = function(lyr){
    var rL = lyr.rect();
    var v = getViewF();
    var so = [doc scrollOrigin];
    var zv = [doc zoomValue]
    var vX = (v.size.width / 2 - so.x) / zv;
    var vY = (v.size.height / 2 - so.y) / zv;
    rL.origin.x = vX
    rL.origin.y = vY
    lyr.setRect(rL)
    if(sv <= 34400) {
      lyr.resizeRoot(true)
    } else {
      lyr.resizeToFitChildrenWithOption(0)
    }
}

var getRnCol = function(){
  var aCols = ["#B71C1C","#e91e63","#9c27b0","#673ab7","#3f51b5","#2196f3","#0288D1","#00bcd4","#00bcd4","#4caf50","#8bc34a","#cddc39","#F9A825","#FF8F00","#F57C00","#D84315","#795548","#9e9e9e","#607d8b"]
  var lA = aCols.length
  return aCols[Math.floor(Math.random() * aCols.length)]
}

var showDlg = function(sMsg, sInfo, aFields, sBtnGoText){
  var dlg = COSAlertWindow.new();
	dlg.setMessageText(sMsg || "Plugin dialog");
	dlg.setInformativeText(sInfo || "To run this plugin more data will be needed");
  for(var i = 0; i < aFields.length; i++){
    dlg.addTextLabelWithValue(aFields[i].label.toString() || ("Field " + i));
  	dlg.addTextFieldWithValue(aFields[i].data.toString()  || ("Data " + i));
  }
	dlg.addButtonWithTitle( sBtnGoText || 'OK');
	dlg.addButtonWithTitle('Cancel');

  var aResults = []
	if(dlg.runModal() == 1000) {
    for(var i = 1; i < aFields.length * 2; i+=2) {
      aResults.push(dlg.viewAtIndex(i).stringValue().toString()) //only every other, we don't care about labels
    }
  }
  //alert(aResults,"Returning this array from dialog:")
  return aResults
}

var getSkVer = function() {
	var v = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"CFBundleShortVersionString"]
	var v2 = v.split('.').join("")
	do {
		v2 = v2 + "0"
	} while(v2.length <= 4)
	return (Number(v2) + 0)
}

function dbgArray(arr,level) {
  var dumped_text = "";
  if(!level) level = 0;

  //The padding given at the beginning of the line.
  var level_padding = "";
  for(var j=0;j<level+1;j++) level_padding += "    ";

  if(typeof(arr) == 'object') { //Array/Hashes/Objects
      for(var item in arr) {
          var value = arr[item];

          if(typeof(value) == 'object') { //If it is an array,
              dumped_text += level_padding + "'" + item + "' ...\n";
              dumped_text += dbgArray(value,level+1);
          } else {
              dumped_text += level_padding + "'" + item + "' => \"" + value + "\"\n";
          }
      }
  } else { //Stings/Chars/Numbers etc.
      dumped_text = "===>"+arr+"<===("+typeof(arr)+")";
  }
  return dumped_text;
}
